service: serverless-scheduler
frameworkVersion: '3'

provider:
  name: aws
  region: ap-northeast-2
  stage: ${opt:stage, 'dev'}
  profile: my-profile
  runtime: nodejs16.x
  logRetentionInDays: 30

plugins:
  - 'serverless-step-functions'
  - 'serverless-webpack'
  - 'serverless-iam-roles-per-function'
custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'npm'
    excludeFiles: .git

functions:
  scheduler:
    name: ${self:provider.stage}-${self:service}-scheduler
    handler: ./src/lambda/scheduler/index.handler
    timeout: 5
    memorySize: 128
    architecture: arm64
  dynamoStream:
    name: ${self:provider.stage}-${self:service}-dynamoStream
    handler: ./src/lambda/dynamoStream/index.handler
    timeout: 5
    memorySize: 128
    architecture: arm64
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:dynamodb
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - table/Scheduler/stream/2023-01-15T13:50:01.958
          filterPatterns:
            - eventName: [INSERT]
stepFunctions:
  stateMachines:
    serverlessScheduler:
      name: serverlessScheduler
      definition:
        Comment: serverless scheduler
        StartAt: TranslateSchedule
        States:
          TranslateSchedule:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: '$.Payload'
            Parameters:
              FunctionName:
                Fn::GetAtt: [scheduler, Arn]
              Payload:
                body.$: '$'
                context.$: '$$'
            Next: waitSchedule
          waitSchedule:
            Type: Wait
            Next: PublishMessage
            TimestampPath: '$.scheduledAt'
          PublishMessage:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: '$.Payload'
            Parameters:
              FunctionName:
                Fn::GetAtt: [scheduler, Arn]
              Payload:
                body.$: '$'
                context.$: '$$'
            Next: GetScheduleStatus
          GetScheduleStatus:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: '$.Payload'
            Parameters:
              FunctionName:
                Fn::GetAtt: [scheduler, Arn]
              Payload:
                body.$: '$'
                context.$: '$$'
            Next: isScheduleStop
          isScheduleStop:
            Type: Choice
            Choices:
              - Variable: '$.isScheduleStop'
                IsNull: true
                Next: EndJob
            Default: TranslateSchedule
          EndJob:
            Type: Succeed
